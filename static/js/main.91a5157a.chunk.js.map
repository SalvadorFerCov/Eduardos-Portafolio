{"version":3,"sources":["components/Home/Home.module.css","components/GridPicText/GridPicText.module.css","components/PicText/PicText.module.css","components/App/App.module.css","components/MiniGameBattleRoyal/MiniGameBattleRoyal.module.css","components/JForce/JForce.module.css","components/NinjaUp/NinjaUp.module.css","components/Pokemon/Pokemon.module.css","components/ProjectDemoRpg/ProjectDemoRPG.module.css","components/Home/Home.js","components/PicText/PicText.js","components/GridPicText/GridPicText.js","components/JForce/JForce.js","components/MiniGameBattleRoyal/MiniGameBattleRoyal.js","components/NinjaUp/NinjaUp.js","components/Pokemon/Pokemon.js","components/ProjectDemoRpg/ProjectDemoRPG.js","components/App/App.js","reportWebVitals.js","index.js"],"names":["module","exports","cx","classNames","bind","styles","projects","name","backgroundUrl","Home","history","useHistory","className","content","proyectImages","map","card","onClick","push","style","backgroundImage","process","width","height","background","renderPic","path","PicText","children","picFirst","imgFileName","imgFileName2","defaultProps","renderGridPic","imgFileNames","gridWrapper","GridPicText","JForce","margin","MiniGameBattleRoyal","NinjaUp","Pokemon","ProjectDemoRPG","App","basename","wrapper","navBar","to","data","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.91a5157a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Home\":\"Home_Home__2A12x\",\"content\":\"Home_content__c1JSB\",\"proyectImages\":\"Home_proyectImages__2578l\",\"card\":\"Home_card__CPUIx\",\"background\":\"Home_background__3nIIj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"GridPicText\":\"GridPicText_GridPicText__1LWvy\",\"picFirst\":\"GridPicText_picFirst__3OI9x\",\"background\":\"GridPicText_background__Px0hb\",\"content\":\"GridPicText_content__1KgiJ\",\"gridWrapper\":\"GridPicText_gridWrapper__4U8d5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"PicText\":\"PicText_PicText__1EpaJ\",\"picFirst\":\"PicText_picFirst__3fSSw\",\"background\":\"PicText_background__EhWue\",\"content\":\"PicText_content__3iyFJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"App_wrapper__kc2PB\",\"content\":\"App_content__1BoB2\",\"navBar\":\"App_navBar__1jjxk\",\"data\":\"App_data__1CmoQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"MiniGameBattleRoyal_content__39D9P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"JForce_content__2GyHp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"NinjaUp_content__2xU-w\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Pokemon_content__1Lgnm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"ProjectDemoRPG_content__8QELK\"};","import React from 'react';\r\nimport classNames from 'classnames/bind';\r\nimport styles from './Home.module.css';\r\nimport { useHistory } from 'react-router-dom';\r\nconst cx = classNames.bind(styles);\r\n\r\nconst projects = [\r\n  { name: 'Ninja Up!', backgroundUrl: '/ninja1.png' },\r\n  { name: 'J Force', backgroundUrl: '/jforce2.png' },\r\n  { name: 'Project: Demo RPG', backgroundUrl: '/chrono_trigger.jpg' },\r\n  {\r\n    name: 'Project: Minigame Battle Royale',\r\n    backgroundUrl: '/minigame2.png',\r\n  },\r\n  {\r\n    name: 'Project: Pokémon MMO',\r\n    backgroundUrl: '/pokemon1.png',\r\n  },\r\n];\r\n\r\nconst Home = () => {\r\n  const history = useHistory();\r\n  return (\r\n    <div className={styles.Home}>\r\n      <div className={styles.content}>\r\n        <h1> Eduardo Peña Junco</h1>\r\n        <p>\r\n          Hola! My name is Eduardo Peña and I'm an Industrial Engineer by career\r\n          but a Gamer by heart. I've worked as a Producer in a videogame studio\r\n          and as a Project Manager/Product Engineer in the software industry.\r\n          What is it that I like about videogames that I would want to dedicate\r\n          my life to them? That is a good question and if I had to answer it, I\r\n          would say the emotions videogames can make you, the player, feel. As a\r\n          Game Designer, I want to create experiences that can make a player\r\n          feel something.\r\n        </p>\r\n      </div>\r\n      <div className={styles.proyectImages}>\r\n        {projects.map(({ name, backgroundUrl }) => (\r\n          <div key={name} className={cx(styles.card)}>\r\n            <div\r\n              onClick={() => {\r\n                history.push(`/${name}`);\r\n              }}\r\n              style={{\r\n                backgroundImage: `url(${process.env.PUBLIC_URL}${backgroundUrl})`,\r\n                width: 400,\r\n                height: 400,\r\n              }}\r\n              className={styles.background}\r\n            ></div>\r\n            <span>{name}</span>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./PicText.module.css\";\nimport classNames from \"classnames/bind\";\n\nconst cx = classNames.bind(styles);\n\nconst renderPic = (path) => (\n  <div\n    style={{\n      backgroundImage: path,\n      width: 400,\n      height: 400,\n    }}\n    className={styles.background}\n  />\n);\n\nconst PicText = ({ children, picFirst, imgFileName, imgFileName2 }) => (\n  <div className={cx(styles.PicText, { picFirst })}>\n    {renderPic(`url(${process.env.PUBLIC_URL}/${imgFileName}`)}\n    {imgFileName2 && renderPic(`url(${process.env.PUBLIC_URL}/${imgFileName2}`)}\n    <div className={styles.content}>{children}</div>\n  </div>\n);\n\nPicText.propTypes = {\n  children: PropTypes.node.isRequired,\n  picFirst: PropTypes.bool,\n  imgFileName: PropTypes.string,\n  imgFileName2: PropTypes.string,\n};\n\nPicText.defaultProps = {\n  picFirst: false,\n  imgFileName: \"melee.jpg\",\n  imgFileName2: null,\n};\n\nexport default PicText;\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './GridPicText.module.css';\r\nimport classNames from 'classnames/bind';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nconst renderGridPic = (imgFileNames) => (\r\n  <div className={styles.gridWrapper}>\r\n    {imgFileNames.map((imgFileName) => (\r\n      <div\r\n        style={{\r\n          backgroundImage: `url(${process.env.PUBLIC_URL}/${imgFileName}`,\r\n          width: 100,\r\n          height: 100,\r\n        }}\r\n        className={styles.background}\r\n      />\r\n    ))}\r\n  </div>\r\n);\r\n\r\nconst GridPicText = ({ children, picFirst, imgFileNames }) => (\r\n  <div className={cx(styles.GridPicText, { picFirst })}>\r\n    {renderGridPic(imgFileNames)}\r\n    <div className={styles.content}>{children}</div>\r\n  </div>\r\n);\r\n\r\nGridPicText.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n  picFirst: PropTypes.bool,\r\n  imgFileName: PropTypes.string,\r\n  imgFileName2: PropTypes.string,\r\n};\r\n\r\nGridPicText.defaultProps = {\r\n  picFirst: false,\r\n  imgFileName: 'melee.jpg',\r\n  imgFileName2: null,\r\n};\r\n\r\nexport default GridPicText;\r\n","import React from 'react';\r\nimport styles from './JForce.module.css';\r\nimport PicText from '../PicText/PicText';\r\nimport GridPicText from '../GridPicText/GridPicText';\r\n\r\nconst renderJForceGamePlay = () => (\r\n  <>\r\n    <h2>Gameplay</h2>\r\n    <ul>\r\n      <li>\r\n        Machines are the main gameplay loop. They crash using a system we\r\n        nicknamed the “Chaos Manager”. This pulls a random number and depending\r\n        on the probability of each machine, they may or may not break down.\r\n      </li>\r\n      <li>\r\n        If a machine is broken down, get ready to enter a minigame to fix it.\r\n        From pressing the A button repeatedly to hitting it a single time for a\r\n        precise action, each machine is different.\r\n      </li>\r\n      <li>\r\n        If a machine continues to be broken down, it will drain the HP of the\r\n        team and if the HP reaches 0, is Game Over. Survive for 5 minutes to\r\n        win!\r\n      </li>\r\n    </ul>\r\n  </>\r\n);\r\n\r\nconst renderJForceGameDesign = () => (\r\n  <>\r\n    <h2>Game Design thought process and notes</h2>\r\n    <p>\r\n      This project was developed at the Global Game Jam 2020, where I\r\n      participated as a Game Designer and Producer. The theme was \"Fix\".\r\n    </p>\r\n    <ul>\r\n      <li>\r\n        From the first time I thought of the game, I always thought of it as a\r\n        multiplayer experience. Thanks to the amazing work of our Lead Eng, we\r\n        were able to implement a 4 player co-op experience.\r\n      </li>\r\n      <li>\r\n        Creating a fun cooperative experience demanded skills of the player but\r\n        I added a certain randomness to it so no game was the same. In order to\r\n        have this, I designed various simple minigames that started easy but\r\n        could become increasingly harder.\r\n      </li>\r\n      <li>\r\n        The machines can break down all at the same time so constant\r\n        communication is key, which makes for a fun couple of sessions. Hiding\r\n        the HP bar sets the tension right from the start and adds to the frantic\r\n        communication.\r\n      </li>\r\n    </ul>\r\n  </>\r\n);\r\n\r\nconst JForce = () => (\r\n  <div>\r\n    <div className={styles.content}>\r\n      <h1> J Force</h1>\r\n      <p>\r\n        Co-operative multiplayer where you have to fix/repair the different\r\n        machines in order to survive. Coordination and communication is\r\n        everything!\r\n      </p>\r\n      <GridPicText\r\n        imgFileNames={[\r\n          'Copy_of_reloj.png',\r\n          'Copy_of_mono_principal.png',\r\n          'Copy_of_press_a.png',\r\n          'Copy_of_tilesets_01.png',\r\n        ]}\r\n      >\r\n        {renderJForceGamePlay()}\r\n      </GridPicText>\r\n      <div>\r\n        <h1> Roles and responsibilities</h1>\r\n        <p>\r\n          Producer: In charge of managing the team of developers and technical\r\n          artists so we could hit the established deadline. Coordinating the\r\n          team and take decisions on what to keep/cut.\r\n        </p>\r\n        <p>\r\n          Game Design: Develop the whole concept of the game, the minigames and\r\n          their mechanics, the genre and the narrative. Balanced all minigames\r\n          mechanics.\r\n        </p>\r\n        <p>\r\n          Game Art: Helped the technical artists to come up with the theme and\r\n          mood of the game.\r\n        </p>\r\n      </div>\r\n      <PicText imgFileName=\"jforce1.png\" picFirst>\r\n        {renderJForceGameDesign()}\r\n      </PicText>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default JForce;\r\n","import React from \"react\";\nimport styles from \"./MiniGameBattleRoyal.module.css\";\n\nconst renderMiniGameBattleRoyalGameDesign = () => (\n  <>\n    <h2>Game Design thought process and notes</h2>\n    <p>\n      This is a project proposal that I sent to Fall Guys developers Tonic games\n      (back then Mediatonic). I already had the idea of a minigame battle royale\n      and I thought I could adapt some of my ideas to their style. I took into\n      consideration the way the game feels and the way players acted in the game\n      to create fun minigames where these expressions are welcomed.\n    </p>\n    <p>\n      Thanks to the amazing talent of @Manlio, I described how I wanted to\n      present my ideas: a new player should understand everything from a single\n      screenshot without too much text. After a couple of revisions, he created\n      something truly amazing. Be sure to check him out! I've added a\n      complementary 2nd screen with more detailed information for the purposes\n      of this portfolio.\n    </p>\n    <p>\n      Besides the 3 minigames I designed (2 of those didn't receive the visual\n      treatment), I proposed the Variation System. This allowed to design a\n      single minigame and modify some of the elements so the experience was\n      different. While there is an implementation of sorts of this in the\n      current game (minigames can have different obstacles) it feels more random\n      than well-thought.\n    </p>\n    <p>\n      What I was suggesting was a clear distinction between variations that\n      would notify the player that the minigame was going to be a certain\n      variation, going from normal to hard to hardest. This can create great\n      moments of excitement after beating one of these levels and the rewards\n      should also match the difficulty.\n    </p>\n    <p>\n      Not only does this affects the perception of players on the amount of\n      minigames there are but it is easier on the production side too. Designing\n      one minigame and some variations of it is faster on game design, UX/UI,\n      development, QA, etc than designing 2-3 different minigames.\n    </p>\n  </>\n);\n\nconst renderPic = (path) => (\n  <div\n    style={{\n      backgroundImage: path,\n      width: 1200,\n      height: 800,\n      margin: \" 15px\",\n    }}\n    className={styles.background}\n  />\n);\n\nconst MiniGameBattleRoyal = () => (\n  <div>\n    <div className={styles.content}>\n      <h1> Project: Minigame Battle Royale </h1>\n      <p>\n        An arena/TV show themed tournament on a dystopian future where\n        participants are comically injured, which is amusing and televised. It\n        consists of various quick challenges spaced in rounds where the lower\n        scores are eliminated until only 1 player is standing.\n      </p>\n      <p>You’ll play as one of the challengers of this show.</p>\n      {renderPic(`url(${process.env.PUBLIC_URL}/minigamebattleroyale1.png`)}\n      {renderPic(`url(${process.env.PUBLIC_URL}/minigamebattleroyale3.png`)}\n      {renderMiniGameBattleRoyalGameDesign()}\n    </div>\n  </div>\n);\n\nexport default MiniGameBattleRoyal;\n","import React from \"react\";\nimport styles from \"./NinjaUp.module.css\";\nimport PicText from \"../PicText/PicText\";\n\nconst renderNinjaUpGamePlay = () => (\n  <>\n    <h2>Gameplay</h2>\n    <ul>\n      <li>\n        Dodge or try to hit a flurry of cool enemies from ninjas to fun UFOs.\n      </li>\n      <li>\n        Draw lines for your ninja to bounce off of, trying to go up and reach\n        the best height possible in an endless sea of challenges.\n      </li>\n      <li>\n        The shorter the rope, the higher and faster you will jump. Will you take\n        the risk?\n      </li>\n      <li>\n        Discover cool ninja power-ups  that will help you reach incredible\n        heights.\n      </li>\n      <li>Unlock all the fun jump master characters and new pixel costumes.</li>\n      <li>Challenge your friends or compete in global leaderboards.</li>\n    </ul>\n  </>\n);\n\nconst renderNinjaUpGameDesign = () => (\n  <>\n    <h2>Game Design thought process and notes</h2>\n    <p>\n      This was a special case because the game was already done by another team\n      but the studio wanted to relaunch it with more features. The approach we\n      took was to look into what made it special and just add more ways for that\n      special component to shine. We identified 2 special components: the\n      jumping mechanic and costumes.\n    </p>\n    <ul>\n      <li>\n        Jumping mechanic: We wanted to give the player more ways to keep jumping\n        and trying to reach new heights so we came up with the idea of power\n        ups. Extra lifes, invincibility for a short amount of time, hyper jump,\n        among others. We also added a EX jump after consecutive successful risky\n        jumps to reward users with high skill.{\" \"}\n      </li>\n      <li>\n        Costumes: The original had 10 costumes that mainly varied from color. We\n        decided to include 20+ costumes with different themes like animal,\n        job-related, music genre and even some pop-culture references. We then\n        decided to give the original 10 costumes a challenge associated to\n        unlock them. You purchased a random drop using Coins gained from various\n        sources: during your run, by hitting a special enemy and at the end of\n        your run based on your performance.\n      </li>\n    </ul>\n  </>\n);\n\nconst NinjaUp = () => (\n  <div>\n    <div className={styles.content}>\n      <h1> Ninja Up! </h1>\n      <p>Jump your way into space with the most daring and cool pixel ninja!</p>\n      <p>\n        Join the endless run action. Draw lines to create new springboards for\n        your ninja to jump from so he can bounce his way up and up!​​​​​​​\n      </p>\n      <PicText imgFileName=\"ninja2.png\"> {renderNinjaUpGamePlay()}</PicText>\n      <div>\n        <h1> Roles and responsibilities</h1>\n        <p>\n          Producer: In charge of managing the team of developers, game\n          designers, technical artists, QA so we could hit the established\n          deadlines. Also planning the schedule of development and communicating\n          it with the Production manager.\n        </p>\n        <p>\n          Game Design: Worked with the other game designer to come up with the\n          power-ups ideas, bonus rounds. I also helped with the random drop\n          rules, % of rarity and logistics of it.\n        </p>\n        <p>\n          Game Art: Worked with the technical artists to come up with themes for\n          the costumes.\n        </p>\n      </div>\n      <PicText imgFileName=\"ninja5.png\" picFirst>\n        {renderNinjaUpGameDesign()}\n      </PicText>\n    </div>\n  </div>\n);\n\nexport default NinjaUp;\n","import React from \"react\";\nimport styles from \"./Pokemon.module.css\";\nimport PicText from \"../PicText/PicText\";\n\nconst renderTabSystemCombat = () => (\n  <>\n    <h2>Combat - Tab system style</h2>\n    <p>\n      This style is based on the Tab system present in most MMOs. A global\n      cooldown will rule over the general use of abilities.\n    </p>\n    <p>\n      The moves will be part of a combo or rotation where you start with Scratch\n      (a low level attack for example), then move to Cut and end with Slash,\n      increasing in overall damage with some moves buffing/debuffing the\n      Pokémon. As your Pokémon raises in level, they will learn new moves that\n      allow them to continue the combo. They will still only be able to learn 4\n      moves but this combo routes will count as 1 move. This paired with Trainer\n      abilities will make the combat more engaging.\n    </p>\n  </>\n);\n\nconst renderPokenStyleCombat = () => (\n  <>\n    <h2>Combat - Pokkén style</h2>\n    <p>\n      One of the most cool and engaging systems to date in a Pokémon spinoff is\n      the Pokkén Tournament game. It is a fighting game with a lot of moves and\n      combos designed specifically for each Pokémon. Each Pokémon felt unique\n      and were divided in categories.\n    </p>\n    <p>\n      For this reason, applying this same level of detail to each Pokémon would\n      be too much for an MMO. While more games in the genre are being developed\n      as an action based game, they do not have the 900+ Pokémon that would need\n      to be animated. A possible solution for this would be that the animations\n      are part of the move and not the Pokémon, same as the mainline games. But\n      for it to reach a certain level of quality I would suggest to make various\n      animations for the Pokémon as well so the player isn't distracted by those\n      details.\n    </p>\n  </>\n);\nconst renderExtraFeatures = () => (\n  <>\n    <h2>Extra features</h2>\n    <ul>\n      <li>\n        Classes - The Class would be the main leveling system for your Trainer.\n        The Trainer will learn many support actions to help your Pokémon in\n        battle and also outside of it.\n      </li>\n      <li>\n        TCG - TCG is one of the most successful spin-offs of the Pokémon\n        franchise. Having the actual game inside this game could be yet another\n        way in which players interact with each other. Seasons, tournaments and\n        friendly battles could all help this feature.\n      </li>\n      <li>Photo Mode aka Pokémon Snap.</li>\n      <li>\n        Secret bases - Decorate your place and invite other people in. You can\n        trade, chat, battle play cards etc\n      </li>\n    </ul>\n    <p>… and many more!</p>\n  </>\n);\n\nconst renderPokemonGameDesign = () => (\n  <>\n    <h2>Game Design thought process and notes</h2>\n    <p>\n      The purpose of the game is to explore and bond with your Pokémon. Inspired\n      by the early stories of the series creator, Satoshi Tajiri, who had so\n      much joy and fun going out to nearby forests to explore and see who could\n      find the most insects, this game should bring the same experience and\n      feelings to the players.\n    </p>\n    <p>\n      I think everyone that has played Pokémon has at least thought how cool\n      this world would be in an Online setting seeing players run all around.\n      With that in mind, I created this project to try to capture everything a\n      Pokémon MMO would need.\n    </p>\n    <p>\n      The most complicated part was the combat, and I couldn’t even decide how\n      to do it, which is why I propose 2 different styles. I’ve played my share\n      of MMOs and action/fighting games so either system I think would be great.\n    </p>\n    <p>\n      What got me excited was all the additions the game could have to truly\n      make it a living world. The TCG and Photo Mode can be games on their own,\n      as they currently are. In typical MMO fashion, each expansion could add an\n      entire region with new Pokémon and areas to discover. All the groundwork\n      has already been laid out thanks to the mainline game series. On this note\n      alone, you have around 8-9 expansions already with original regions and\n      never before seen Pokémon as part of this original game.\n    </p>\n    <p>\n      I took inspiration from various Pokémon sources, such as: the main games,\n      the TCG, Pokémon Snap, Pokkén Tournament DX, Pokémon Adventures manga,\n      among others.\n    </p>\n    <p>\n      I’d like to clarify that this is the least “completed” project due to the\n      size of the idea. But I believe that the building blocks are there. For\n      more details, information and crazy ideas you can check the GDD I made\n      (warning: it is not the most organized document).\n    </p>\n  </>\n);\n\nconst Pokemon = () => (\n  <div>\n    <div className={styles.content}>\n      <h1> Project: Pokémon MMO</h1>\n      <p>\n        Your adventure awaits: Climb mountains, traverse oceans, explore dark\n        caves. Travel in a vast and expansive world where you will need to work\n        with your Pokémon to overcome the many ordeals you will face.\n      </p>\n      <p>\n        This is a project a little different than the other ones presented in my\n        portfolio. Due to the size of an MMO, I will outline some of the main\n        attractions and my design thoughts. ​​​​​​​\n      </p>\n      <PicText imgFileName=\"pokemon3.png\"> {renderTabSystemCombat()}</PicText>\n      <PicText picFirst imgFileName=\"pokemon4.png\"> {renderPokenStyleCombat()}</PicText>\n      <PicText imgFileName=\"pokemon2.png\"> {renderExtraFeatures()}</PicText>\n      <PicText picFirst imgFileName=\"pokemon5.png\"> {renderPokemonGameDesign()}</PicText>\n    </div>\n  </div>\n);\n\nexport default Pokemon;\n","import React from \"react\";\nimport styles from \"./ProjectDemoRPG.module.css\";\nimport PicText from \"../PicText/PicText\";\n\nconst renderProjectDemoRPGGamePlay = () => (\n  <>\n    <h2>Gameplay</h2>\n    <ul>\n      <li>\n        Explore and battle your way through enemies in this RPG inspired by the\n        classics.\n      </li>\n      <li>\n        Timed commands: If you time your button presses just right when\n        attacking an enemy, you’ll do extra damage or even unlock further steps\n        of the Combo. \n      </li>\n      <li>\n        During combat, unleash devastating Combos with 1, 2 or up to 3\n        characters. These Combos can then be modified with a Timed command.\n      </li>\n      <li>\n        Beginner vs advanced - Choose between these 2 modes and use the one you\n        feel more comfortable with. Beginner will slow down before each input\n        and show which button to press. Advanced will use less resources and hit\n        harder but the animation will move at normal speed and not show any\n        button indications on screen. \n      </li>\n      <li>\n        Defense: Use Timed commands to avoid, block or counterattack incoming\n        enemy attacks. Which action you will do depends on your timing and the\n        attack of the enemy.\n      </li>\n    </ul>\n  </>\n);\n\nconst renderProjectDemoRPGGameDesign = () => (\n  <>\n    <h2>Game Design thought process and notes</h2>\n    <p>\n      One of the most satisfying feelings is to receive immediate feedback for\n      doing anything. I want to give that feeling to the players were they can\n      feel good in each fight because they managed to land critical hits and\n      evade all attacks. This can only be done not by a random stat but by the\n      skill of the player. I want to put players in a Flow state when faced with\n      a difficult challenge.\n    </p>\n    <p>\n      Coming from a long history with RPGs and Fighting games, I researched a\n      lot of the systems that have been used in those genres and came up with\n      this idea. I took the elements of an RPG and stripped it down to its most\n      basic form to test if the core gameplay was good. Then I used the combo\n      system found on some RPGs and mixed it with the feeling of combos in\n      Fighting games.\n    </p>\n    <p>\n      On the balancing side, I created a table and a calculator to see how all\n      the attacks with their various modes would play out. The system of stats\n      has to be solid for scalability purposes.\n    </p>\n  </>\n);\n\nconst ProjectDemoRPG = () => (\n  <div>\n    <div className={styles.content}>\n      <h1> Project: Demo RPG</h1>\n      <p>\n        In this world, civilisation has the ability to wield different types of\n        Magic, namely control the very energy that surrounds them. Our conflict\n        will take us to one of the continents of this world and see the events\n        that unfold there.\n      </p>\n      <p>\n        You’ll play as the best friend of the heroine who will try to become the\n        Queen and lead her small kingdom to prosperity.\n      </p>\n      <PicText imgFileName=\"demo1.jpg\" imgFileName2=\"X-strike.png\">\n        {renderProjectDemoRPGGamePlay()}\n      </PicText>\n      <div>\n        <h1> Roles and responsibilities</h1>\n        <p>\n          Game Design: Develop the whole concept of the game, the mechanics of\n          each move and combo which include the timing of the button presses in\n          order for the attacks to be successful, the damage and the attacks of\n          enemies.​​​​​​​\n        </p>\n      </div>\n      <PicText imgFileName=\"demo3.gif\" picFirst>\n        {renderProjectDemoRPGGameDesign()}\n      </PicText>\n    </div>\n  </div>\n);\n\nexport default ProjectDemoRPG;\n","import React from 'react';\r\nimport { Route, HashRouter, Switch, Link } from 'react-router-dom';\r\nimport Home from '../Home/Home';\r\nimport JForce from '../JForce/JForce';\r\nimport MiniGameBattleRoyal from '../MiniGameBattleRoyal/MiniGameBattleRoyal';\r\nimport NinjaUp from '../NinjaUp/NinjaUp';\r\nimport Pokemon from '../Pokemon/Pokemon';\r\nimport ProjectDemoRPG from '../ProjectDemoRpg/ProjectDemoRPG';\r\nimport styles from './App.module.css';\r\n\r\nconst App = () => (\r\n  <HashRouter basename=\"Eduardos-Portafolio\">\r\n    <div\r\n      className={styles.wrapper}\r\n      style={{\r\n        backgroundImage: `url(${process.env.PUBLIC_URL + '/fondo3.jpg'})`,\r\n      }}\r\n    >\r\n      <div className={styles.content}>\r\n        <div className={styles.navBar}>\r\n          <li>\r\n            <Link to=\"/\">Home</Link>\r\n          </li>\r\n        </div>\r\n        <div className={styles.data}>\r\n          <Switch>\r\n            <Route path=\"/\" exact>\r\n              <Home />\r\n            </Route>\r\n            <Route path=\"/Ninja Up!\" exact>\r\n              <NinjaUp />\r\n            </Route>\r\n            <Route path=\"/J Force\" exact>\r\n              <JForce />\r\n            </Route>\r\n            <Route path=\"/Project: Demo RPG\" exact>\r\n              <ProjectDemoRPG />\r\n            </Route>\r\n            <Route path=\"/Project: Minigame Battle Royale\" exact>\r\n              <MiniGameBattleRoyal />\r\n            </Route>\r\n            <Route path=\"/Project: Pokémon MMO\" exact>\r\n              <Pokemon />\r\n            </Route>\r\n          </Switch>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </HashRouter>\r\n);\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./components/App/App\";\r\nimport \"./index.css\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}